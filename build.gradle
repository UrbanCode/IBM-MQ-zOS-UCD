/**
 * (c) Copyright IBM Corporation 2017.
 * This is licensed under the following license.
 * The Eclipse Public 1.0 License (http://www.eclipse.org/legal/epl-v10.html)
 * U.S. Government Users Restricted Rights:  Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */
/* The Groovy plugin for Gradle assumes the following layout
 * src/main/java
 * src/main/resources
 * src/main/groovy
 *
 * src/test/java
 * src/test/resources
 * src/test/groovy
 *
 * src/<sourceSet>/java
 * src/<sourceSet>/resources
 * src/<sourceSet>/groovy
 *
 * You can override or create a new sourceSet with the following snippet:
 *
 * sourceSets {
 *     main {
 *         // We can override src/main/groovy to also add src/main/zip
 *         groovy {
 *             srcDirs = ['src/main/groovy', 'src/main/zip']
 *         }
 *     }
 *     mySourceSet {
 *         groovy {
 *             srcDirs = ['src/myDir/groovy']
 *         }
 *     }
 * }
 */

import org.apache.tools.ant.filters.ReplaceTokens

def pluginName="IBM-MQ-zOS-UCD"
def pluginVersion = project.hasProperty('pluginVersion') ? project.getProperty('pluginVersion') : 'dev'

apply plugin: 'groovy'

defaultTasks 'distPlugin'

def buildLocaleDir = 'build/locale'
def buildUtilDir   = 'build/util'

configurations {
    // Remove the groovy-all jar from runtime dependencies
    runtime.exclude module: 'groovy-all'
}

repositories {
    mavenCentral()
    maven {
        url "https://public.dhe.ibm.com/software/products/UrbanCode/maven2/"
    }
}

dependencies {
    // groovy-plugin-utils pulls down groovy-all as a transitive dependency for the 'compile' configuration
    compile 'com.ibm.urbancode.plugins:groovy-plugin-utils:+'
    compile 'com.ibm.urbancode.util:i18n-scraper:+'

    // This compiles the i18n-scraper script
    compile localGroovy()
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/zip', "${buildDir}/util"]
        }
    }
    zip {
        groovy {
            srcDirs = ['src/main/zip']
        }
    }
    classes {
        groovy {
            srcDirs = ['src/main/groovy', "${buildDir}/util"]
        }
    }
}

compileJava {
    dependsOn 'extractGPU', 'copyi18n'
}
compileGroovy {
    include "i18n-scraper.groovy"
}

task copyDeps(type: Copy) {
    into 'lib'
    copy {
        from configurations.runtime
        include { target ->
            return target.file.path.contains("com.ibm.urbancode")
        }
        into 'lib'
        rename { fileName ->
            stripVersion(fileName)
        }
    }
    copy {
        from configurations.runtime
        exclude { target ->
            return target.file.path.contains("com.ibm.urbancode")
        }
        into 'lib'
    }
}

task extractGPU(type: Copy) {
    def zipFile = file('lib/groovy-plugin-utils.jar')
    def outputDir = file("${buildDir}/util")

    from zipTree(zipFile)
    into outputDir
}

task copyi18n(type: Copy) {
    def i18nFile = file('lib/i18n-scraper.groovy')
    def outputDir = file("${buildDir}/util")

    from i18nFile
    into outputDir
}

task distPlugin(type: Zip, dependsOn: ['compileGroovy', 'gatherI18n']) {
    from(sourceSets.zip.groovy.srcDirs) {
        filter(ReplaceTokens, tokens: [RELEASE_VERSION: pluginVersion])
    }

    into('lib') {
        from copyDeps
        exclude 'i18n-scraper.groovy'
        exclude 'groovy-plugin-utils.jar'
        exclude 'groovy-all-*.jar'
        exclude 'gson-*.jar'
    }
    into('locale') {
        from buildLocaleDir
    }
    into('classes') {
        from sourceSets.classes.groovy.srcDirs
        exclude 'META-INF', 'i18n-scraper.groovy'
    }
    if (pluginVersion) {
        archiveName = "${pluginName}-v${pluginVersion}.zip"
    } else {
        archiveName = "${pluginName}-dev.zip"
    }
}

task gatherI18n(type: JavaExec) {
    delete buildLocaleDir
    mkdir buildLocaleDir

    main = 'i18n-scraper'
    args 'build/locale/en.properties'
    classpath = sourceSets.main.runtimeClasspath
}

task writePluginVersionToFile(){
    File pluginXml = new File('./src/main/zip/plugin.xml')
    def plugin = new XmlParser().parse(pluginXml)
    def version = plugin.header.identifier.@version
    File file = new File(".output.txt")
    file.write version[0]
}

task cleanAll(dependsOn: ['clean', 'cleanCopyDeps', 'cleanDistPlugin', 'cleanGatherI18n'])

String stripVersion(String fileNameWithVersion) {
    String ext = fileNameWithVersion.substring(fileNameWithVersion.lastIndexOf("."),fileNameWithVersion.length())
    int end = fileNameWithVersion.lastIndexOf("-"); //assumes that: name-version.ext. Will not work with name-version-SNAPSHOT.ext
    return fileNameWithVersion.substring(0, end) + ext
}
