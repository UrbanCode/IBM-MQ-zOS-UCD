<?xml version="1.0" encoding="UTF-8"?>
<!--
    Â© Copyright IBM Corporation 2016, 2022.
    This is licensed under the following license.
    The Eclipse Public 1.0 License (http://www.eclipse.org/legal/epl-v10.html)
    U.S. Government Users Restricted Rights:  Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:server="http://www.urbancode.com/PluginServerXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier id="com.ibm.ucd.plugin.mqzos" name="MQ for zOS" version="7"/>
    <description> The MQ for zOS plug-in includes deployment activities for MQ for zOS
    </description>
    <tag>Middleware/Messaging/MQ for zOS</tag>
  </header>
  <step-type name="Generate MQSC Commands">
    <description>Generate MQSC commands from the base file, overrides file and property file.</description>
    <properties>
      <property name="fileSubFolders" required="true">
        <property-ui description="Specify a list of sub folders that contain the base, overrides and properties files. Specify each sub folder on a new line and do not include leading or trailing file separators." label="File Sub Folders" type="textAreaBox"
                     default-value=""/>
      </property>
      <property name="baseFileNameFilter" required="true">
        <property-ui description="Specify a base file name filter using a regular expression. For example: .*.mqdef_base for base files with a type of mqdef_base." label="Base File Name Filter" type="textBox"
                     default-value=".*.mqdef_base"/>
      </property>
      <property name="overridesFileType" required="true">
        <property-ui description="Specify a file type for the overrides file. Overrides files are identified by concatenating the base file name with the overrides file type." label="Overrides File Type" type="textBox"
                     default-value="mqdef_overrides"/>
      </property>
      <property name="propertiesFileType" required="true">
        <property-ui description="Specify a file type for the properties file. Properties files are identified by concatenating the base file name with properties file type." label="Properties File Type" type="textBox"
                     default-value="mqdef_properties"/>
      </property>
      <property name="targetEnvironmentName" required="true">
        <property-ui description="The name of the target environment that resources are to be deployed to." label="Target Environment Name" type="textBox"
                     default-value="${p:environment.name}" hidden="true"/>
      </property>
      <property name="userData" required="false">
        <property-ui description="User data written out along with the generated MQSC form." label="User Data" type="textBox"
                     default-value="${p:component.name} ${p:version.name}" hidden="true"/>
      </property>
      <property name="traceEnabled" required="false">
        <property-ui description="Enable or disable trace for this plugin." label="Enable/Disable Trace" type="checkBox"
                     default-value="false" hidden="true"/>
      </property>
  </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file".  -->
   <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="classes"/>
      <arg file="generate_commands.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
</plugin>
